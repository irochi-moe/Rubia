From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Irochi <me@irochi.moe>
Date: Tue, 25 Oct 2022 12:24:02 +0900
Subject: [PATCH] Rubia Config and Commands


diff --git a/build.gradle.kts b/build.gradle.kts
index fb5af09302d4710f70d61b52604661a2221f004b..ff405e88fd662be4c020fa937592d6f230a2881b 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -46,6 +46,13 @@ dependencies {
     runtimeOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.7.3")
     runtimeOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.7.3")
 
+    // Rubia start
+    implementation("org.yaml:snakeyaml:1.32")
+    implementation ("me.carleslc.Simple-YAML:Simple-Yaml:1.8.2") {
+        exclude(group="org.yaml", module="snakeyaml")
+    }
+    // Rubia end
+
     testImplementation("io.github.classgraph:classgraph:4.8.47") // Paper - mob goal test
     testImplementation("junit:junit:4.13.2")
     testImplementation("org.hamcrest:hamcrest-library:1.3")
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 06bff37e4c1fddd3be6343049a66787c63fb420c..f0409b3cf301572be2a73ef1fdb81e6ead0f752b 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -241,7 +241,8 @@ public class TimingsExport extends Thread {
         parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)), // Rubia
+            pair("rubia", mapAsJSON(moe.irochi.rubia.RubiaConfig.getConfigCopy(), null)) // Rubia
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/moe/irochi/rubia/RubiaCommand.java b/src/main/java/moe/irochi/rubia/RubiaCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..924179c6a891940c025d27283bd8f7ca91df47d2
--- /dev/null
+++ b/src/main/java/moe/irochi/rubia/RubiaCommand.java
@@ -0,0 +1,87 @@
+package moe.irochi.rubia;
+
+import com.google.common.base.Joiner;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class RubiaCommand extends Command {
+
+    private static final String BASE_PERMISSION = "bukkit.command.rubia.";
+    private static final List<String> SUBCOMMANDS = List.of("reload", "version");
+
+    public RubiaCommand(String name) {
+        super(name);
+        this.description = "Rubia related commands";
+        this.usageMessage = "/rubia [" + Joiner.on(" | ").join(SUBCOMMANDS) + "]";
+        this.setPermission("bukkit.command.rubia;" + Joiner.on(";").join(SUBCOMMANDS.stream().map(s -> BASE_PERMISSION + s).collect(Collectors.toSet())));
+    }
+
+    public static void register() {
+        MinecraftServer.getServer().server.getCommandMap().register("rubia", "Rubia", new RubiaCommand("rubia"));
+    }
+
+    private boolean testPermission(@NotNull CommandSender sender, String permission) {
+        if (sender.hasPermission(BASE_PERMISSION + permission) || sender.hasPermission("bukkit.command.rubia")) return true;
+        sender.sendMessage(Bukkit.permissionMessage());
+        return false;
+    }
+
+    @Override
+    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args, @Nullable Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return SUBCOMMANDS;
+        }
+        return List.of();
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+        if (!testPermission(sender)) return true;
+        Component PREFIX = MiniMessage.miniMessage().deserialize("<aqua>Rubia</aqua><white> â€¢ </white>");
+        if (args.length == 0) {
+            sender.sendMessage(PREFIX.append(Component.text("Usage: " + this.usageMessage, NamedTextColor.RED)));
+            return false;
+        }
+        if (SUBCOMMANDS.contains(args[0].toLowerCase())) {
+            if (!testPermission(sender, args[0].toLowerCase())) return true;
+        }
+        switch (args[0].toLowerCase()) {
+            case "reload":
+                if (!testPermission(sender, "reload")) break;
+                try {
+                    RubiaConfig.load();
+                } catch (IOException e) {
+                    sender.sendMessage(PREFIX.append(Component.text("Failed to reload configuration.", NamedTextColor.RED)));
+                    e.printStackTrace();
+                    break;
+                }
+                MinecraftServer.getServer().server.reloadCount++;
+                sender.sendMessage(PREFIX.append(Component.text("Rubia configuration has been reloaded.", NamedTextColor.GREEN)));
+                break;
+            case "ver":
+                if (!testPermission(sender, "version")) break;
+            case "version":
+                Command version = MinecraftServer.getServer().server.getCommandMap().getCommand("version");
+                if (version != null) {
+                    version.execute(sender, commandLabel, new String[0]);
+                    break;
+                }
+            default:
+                sender.sendMessage(PREFIX.append(Component.text("Usage: " + this.usageMessage, NamedTextColor.RED)));
+                return false;
+        }
+        return true;
+    }
+}
diff --git a/src/main/java/moe/irochi/rubia/RubiaConfig.java b/src/main/java/moe/irochi/rubia/RubiaConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..6fca938e7fb31c82f90c48ebb45385768f5f21c3
--- /dev/null
+++ b/src/main/java/moe/irochi/rubia/RubiaConfig.java
@@ -0,0 +1,135 @@
+package moe.irochi.rubia;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import net.minecraft.server.MinecraftServer;
+import org.apache.logging.log4j.Level;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.MemoryConfiguration;
+import org.jetbrains.annotations.Nullable;
+import org.simpleyaml.configuration.comments.CommentType;
+import org.simpleyaml.configuration.file.YamlFile;
+import org.simpleyaml.exceptions.InvalidConfigurationException;
+
+public class RubiaConfig {
+
+    private static final YamlFile config = new YamlFile();
+    private static int updates = 0;
+    
+    private static ConfigurationSection convertToBukkit(org.simpleyaml.configuration.ConfigurationSection section) {
+        ConfigurationSection newSection = new MemoryConfiguration();
+        for (String key : section.getKeys(false)) {
+            if (section.isConfigurationSection(key)) {
+                newSection.set(key, convertToBukkit(section.getConfigurationSection(key)));
+            } else {
+                newSection.set(key, section.get(key));
+            }
+        }
+        return newSection;
+    }
+
+    public static ConfigurationSection getConfigCopy() {
+        return convertToBukkit(config);
+    }
+
+    public static int getUpdates() {
+        return updates;
+    }
+
+    public static void load() throws IOException {
+        File configFile = new File("rubia.yml");
+        
+        if (configFile.exists()) {
+            try {
+                config.load(configFile);
+            } catch (InvalidConfigurationException e) {
+                throw new IOException(e);
+            }
+        }
+
+        getString("info.version", "1.0");
+        setComment("info",
+                "Rubia Configuration",
+                "Rubia. Personal Paper fork by Irochi.",
+                "",
+                "https://irochi.moe");
+
+        for (Method method : RubiaConfig.class.getDeclaredMethods()) {
+            if (Modifier.isStatic(method.getModifiers()) && Modifier.isPrivate(method.getModifiers()) && method.getParameterCount() == 0 &&
+                    method.getReturnType() == Void.TYPE && !method.getName().startsWith("lambda")) {
+                method.setAccessible(true);
+                try {
+                    method.invoke(null);
+                } catch (Throwable t) {
+                    MinecraftServer.LOGGER.warn("Failed to load configuration option from " + method.getName(), t);
+                }
+            }
+        }
+
+        updates++;
+
+        config.save(configFile);
+    }
+
+    private static void setComment(String key, String... comment) {
+        if (config.contains(key)) {
+            config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+        }
+    }
+
+    private static void ensureDefault(String key, Object defaultValue, String... comment) {
+        if (!config.contains(key)) {
+            config.set(key, defaultValue);
+            config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+        }
+    }
+
+    private static boolean getBoolean(String key, boolean defaultValue, String... comment) {
+        return getBoolean(key, null, defaultValue, comment);
+    }
+
+    private static boolean getBoolean(String key, @Nullable String oldKey, boolean defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getBoolean(key, defaultValue);
+    }
+
+    private static int getInt(String key, int defaultValue, String... comment) {
+        return getInt(key, null, defaultValue, comment);
+    }
+
+    private static int getInt(String key, @Nullable String oldKey, int defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getInt(key, defaultValue);
+    }
+
+    private static double getDouble(String key, double defaultValue, String... comment) {
+        return getDouble(key, null, defaultValue, comment);
+    }
+
+    private static double getDouble(String key, @Nullable String oldKey, double defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getDouble(key, defaultValue);
+    }
+
+    private static String getString(String key, String defaultValue, String... comment) {
+        return getOldString(key, null, defaultValue, comment);
+    }
+
+    private static String getOldString(String key, @Nullable String oldKey, String defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getString(key, defaultValue);
+    }
+
+    private static List<String> getStringList(String key, List<String> defaultValue, String... comment) {
+        return getStringList(key, null, defaultValue, comment);
+    }
+
+    private static List<String> getStringList(String key, @Nullable String oldKey, List<String> defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getStringList(key);
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index ff3eced0e20c39b825586897ee2fed01dd471d88..2ed35d61fead512d1ab2888e16ac7cc011dde047 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -227,6 +227,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
 
+        moe.irochi.rubia.RubiaConfig.load(); // Rubia
+        moe.irochi.rubia.RubiaCommand.register(); // Rubia
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
