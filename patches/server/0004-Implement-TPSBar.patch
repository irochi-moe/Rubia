From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Irochi <me@irochi.moe>
Date: Tue, 25 Oct 2022 12:54:35 +0900
Subject: [PATCH] Implement TPSBar

Original code by PurpurMC, licensed under MIT
You can find the original code on https://github.com/PurpurMC/Purpur

diff --git a/src/main/java/moe/irochi/rubia/command/TPSBarCommand.java b/src/main/java/moe/irochi/rubia/command/TPSBarCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..b318f0bafee2dc1d64ae0a10e50d33fa5c6ece6c
--- /dev/null
+++ b/src/main/java/moe/irochi/rubia/command/TPSBarCommand.java
@@ -0,0 +1,259 @@
+package moe.irochi.rubia.command;
+
+import com.mojang.brigadier.CommandDispatcher;
+import moe.irochi.rubia.RubiaCommand;
+import io.papermc.paper.adventure.PaperAdventure;
+import net.kyori.adventure.bossbar.BossBar;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
+import org.bukkit.entity.Player;
+import org.bukkit.scheduler.BukkitRunnable;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.*;
+
+public class TPSBarCommand {
+
+    public static void register(@NotNull CommandDispatcher<CommandSourceStack> dispatcher) {
+        dispatcher.register(Commands.literal("tpsbar")
+            .requires(listener -> listener.hasPermission(2, "bukkit.command.rubia.tpsbar") || listener.hasPermission(2, "bukkit.command.rubia"))
+            .executes(context -> execute(context.getSource(), Collections.singleton(context.getSource().getPlayerOrException())))
+            .then(Commands.argument("targets", EntityArgument.players()).executes((context) -> execute(context.getSource(), EntityArgument.getPlayers(context, "targets"))))
+        );
+    }
+
+    private static int execute(CommandSourceStack sender, @NotNull Collection<ServerPlayer> targets) {
+        Component PREFIX = MiniMessage.miniMessage().deserialize("<aqua>Rubia</aqua><white> â€¢ </white>");
+        for (ServerPlayer target : targets) {
+            boolean tpsBar = TPSBarTask.getInstance().togglePlayer(target.getBukkitEntity());
+            target.setTPSBar(tpsBar);
+            sender.sendSuccess(PaperAdventure.asVanilla(PREFIX.append(MiniMessage.miniMessage().deserialize(
+                "<gray>TPSBar toggled</gray> <toggle> <gray>for</gray> <yellow><target></yellow><gray>.</gray>",
+                Placeholder.component("toggle", Component.translatable(tpsBar ? "options.on" : "options.off").color(tpsBar ? NamedTextColor.GREEN : NamedTextColor.RED)),
+                Placeholder.parsed("target", target.getGameProfile().getName())
+            ))), false);
+        }
+        return targets.size();
+    }
+
+    public static class TPSBarTask extends BukkitRunnable {
+
+        public enum FillMode {
+            TPS,
+            MSPT,
+            PING
+        }
+
+        private static TPSBarTask instance;
+
+        private final Map<UUID, BossBar> tpsBars = new HashMap<>();
+        private boolean started;
+
+        private double tps = 20.0d;
+        private double mspt = 0.0d;
+        private int tick = 0;
+
+        public static TPSBarTask getInstance() {
+            if (instance == null) instance = new TPSBarTask();
+            return instance;
+        }
+
+    private static String tpsBarTitle = "<gray>TPS<yellow>:</yellow> <tps> MSPT<yellow>:</yellow> <mspt> Ping<yellow>:</yellow> <ping>ms";
+    private static BossBar.Overlay tpsBarOverlay = BossBar.Overlay.NOTCHED_20;
+
+        public BossBar createTPSBar() {
+            return BossBar.bossBar(Component.text(""), 0.0f, getInstance().getTPSBarColour(), tpsBarOverlay);
+        }
+
+        public void updateTPSBar(@NotNull BossBar tpsBar, @NotNull Player target) {
+            tpsBar.progress(getTPSBarProgress());
+            tpsBar.color(getTPSBarColour());
+            tpsBar.name(
+                    MiniMessage.miniMessage().deserialize(
+                            tpsBarTitle,
+                            Placeholder.component("tps", getTPSColour()),
+                            Placeholder.component("mspt", getMSPTColour()),
+                            Placeholder.component("ping", getPingColour(target.getPing()))
+                    )
+            );
+        }
+
+        @Override
+        public void run() {
+            if (++tick < 20) return;
+
+            tick = 0;
+            tps = Math.max(Math.min(Bukkit.getTPS()[0], 20.0d), 0.0d);
+            mspt = Bukkit.getAverageTickTime();
+
+            Iterator<Map.Entry<UUID, BossBar>> iterator = tpsBars.entrySet().iterator();
+            while (iterator.hasNext()) {
+                Map.Entry<UUID, BossBar> tpsBar = iterator.next();
+                Player target = Bukkit.getPlayer(tpsBar.getKey());
+                if (target == null) {
+                    iterator.remove();
+                    continue;
+                }
+                updateTPSBar(tpsBar.getValue(), target);
+            }
+        }
+
+        @Override
+        public synchronized void cancel() throws IllegalStateException {
+            super.cancel();
+            new HashSet<>(tpsBars.keySet()).forEach(uuid -> {
+                Player target = Bukkit.getPlayer(uuid);
+                if (target != null) removePlayer(target);
+            });
+            tpsBars.clear();
+        }
+
+        public void start() {
+            stop();
+            runTaskTimerAsynchronously(new MinecraftInternalPlugin(), 1, 1);
+            started = true;
+        }
+
+        public void stop() {
+            if (started) cancel();
+        }
+
+        public static void startAll() {
+            getInstance().start();
+        }
+
+        public static void stopAll() {
+            getInstance().stop();
+        }
+
+        public void addPlayer(Player target) {
+            removePlayer(target);
+            BossBar tpsBar = createTPSBar();
+            tpsBars.put(target.getUniqueId(), tpsBar);
+            updateTPSBar(tpsBar, target);
+            target.showBossBar(tpsBar);
+        }
+
+        public static void addToAll(@NotNull ServerPlayer vanillaTarget) {
+            if (vanillaTarget.getTPSBar()) getInstance().removePlayer(vanillaTarget.getBukkitEntity());
+        }
+
+        public boolean removePlayer(@NotNull Player target) {
+            BossBar tpsBar = tpsBars.remove(target.getUniqueId());
+            if (tpsBar != null) {
+                target.hideBossBar(tpsBar);
+                return true;
+            }
+            return false;
+        }
+
+        public static void removeFromAll(Player target) {
+            getInstance().removePlayer(target);
+        }
+
+        public boolean togglePlayer(Player target) {
+            if (removePlayer(target)) return false;
+            addPlayer(target);
+            return true;
+        }
+
+    private static TPSBarTask.FillMode tpsBarMode = TPSBarTask.FillMode.MSPT;
+
+        private float getTPSBarProgress() {
+            if (tpsBarMode == FillMode.MSPT) return Math.max(Math.min((float) mspt / 50.0F, 1.0F), 0.0F);
+            return Math.max(Math.min((float) tps / 20.0F, 1.0F), 0.0F);
+        }
+
+    private static BossBar.Color tpsBarColourGood = BossBar.Color.GREEN;
+    private static BossBar.Color tpsBarColourMed = BossBar.Color.YELLOW;
+    private static BossBar.Color tpsBarColourLow = BossBar.Color.RED;
+
+        private BossBar.Color getTPSBarColour() {
+            if (isGood(tpsBarMode)) {
+                return tpsBarColourGood;
+            } else if (isMedium(tpsBarMode)) {
+                return tpsBarColourMed;
+            }
+            return tpsBarColourLow;
+        }
+
+    private static String tpsBarTextColourGood = "<gradient:#55ff55:#00aa00><text></gradient>";
+    private static String tpsBarTextColourMed = "<gradient:#ffff55:#ffaa00><text></gradient>";
+    private static String tpsBarTextColourLow = "<gradient:#ff5555:#aa0000><text></gradient>";
+
+        private @NotNull Component getTPSColour() {
+            if (isGood(FillMode.TPS)) {
+                return MiniMessage.miniMessage().deserialize(tpsBarTextColourGood, Placeholder.parsed("text", String.format("%.2f", tps)));
+            } else if (isMedium(FillMode.TPS)) {
+                return MiniMessage.miniMessage().deserialize(tpsBarTextColourMed, Placeholder.parsed("text", String.format("%.2f", tps)));
+            }
+            return MiniMessage.miniMessage().deserialize(tpsBarTextColourLow, Placeholder.parsed("text", String.format("%.2f", tps)));
+        }
+
+        private @NotNull Component getMSPTColour() {
+            if (isGood(FillMode.MSPT)) {
+                return MiniMessage.miniMessage().deserialize(tpsBarTextColourGood, Placeholder.parsed("text", String.format("%.2f", mspt)));
+            } else if (isMedium(FillMode.MSPT)) {
+                return MiniMessage.miniMessage().deserialize(tpsBarTextColourMed, Placeholder.parsed("text", String.format("%.2f", mspt)));
+            }
+            return MiniMessage.miniMessage().deserialize(tpsBarTextColourLow, Placeholder.parsed("text", String.format("%.2f", mspt)));
+        }
+
+        private @NotNull Component getPingColour(int ping) {
+            if (isGood(FillMode.PING)) {
+                return MiniMessage.miniMessage().deserialize(tpsBarTextColourGood, Placeholder.parsed("text", String.format("%s", ping)));
+            } else if (isMedium(FillMode.PING)) {
+                return MiniMessage.miniMessage().deserialize(tpsBarTextColourMed, Placeholder.parsed("text", String.format("%s", ping)));
+            }
+            return MiniMessage.miniMessage().deserialize(tpsBarTextColourLow, Placeholder.parsed("text", String.format("%s", ping)));
+        }
+
+        private boolean isGood(FillMode mode) {
+            return isGood(mode, 0);
+        }
+
+        private boolean isGood(@NotNull FillMode mode, int ping) {
+            switch (mode) {
+                case MSPT -> {
+                    return mspt < 40;
+                }
+                case TPS -> {
+                    return tps >= 19;
+                }
+                case PING -> {
+                    return ping < 100;
+                }
+            }
+            return false;
+        }
+
+        private boolean isMedium(FillMode mode) {
+            return isMedium(mode, 0);
+        }
+
+        private boolean isMedium(@NotNull FillMode mode, int ping) {
+            switch (mode) {
+                case MSPT -> {
+                    return mspt < 50;
+                }
+                case TPS -> {
+                    return tps >= 15;
+                }
+                case PING -> {
+                    return ping < 200;
+                }
+            }
+            return false;
+        }
+
+    }
+
+}
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 7c96f7fc5997761426a0c62cad0cab5cc668f282..058ad465d0255c20fdcc32c7284907f91cb1ea1f 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -207,6 +207,7 @@ public class Commands {
             SetPlayerIdleTimeoutCommand.register(this.dispatcher);
             StopCommand.register(this.dispatcher);
             WhitelistCommand.register(this.dispatcher);
+            moe.irochi.rubia.command.TPSBarCommand.register(this.dispatcher); // Rubia
         }
 
         if (environment.includeIntegrated) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 65f18018f3d0529b30c2478b31b0eb067e1b4e1c..d3eef30762e7d0c863da92ad429ae44bf2659a78 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1019,6 +1019,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.safeShutdown(flag, false);
     }
     public void safeShutdown(boolean flag, boolean isRestarting) {
+        moe.irochi.rubia.command.TPSBarCommand.TPSBarTask.stopAll(); // Rubia
         this.isRestarting = isRestarting;
         this.hasLoggedStop = true; // Paper
         if (isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 2ed35d61fead512d1ab2888e16ac7cc011dde047..5382b329b64b0061106e9177290fa08aa2ebdaf1 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -341,6 +341,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
                 DedicatedServer.LOGGER.info("JMX monitoring enabled");
             }
 
+            moe.irochi.rubia.command.TPSBarCommand.TPSBarTask.startAll(); // Rubia
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index c00c20626bf9695c88d35b2df015ca1853ecf3b5..58a9f0b90df17f222f14f68482c3e2d5e59fafd0 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -261,6 +261,7 @@ public class ServerPlayer extends Player {
     public Integer clientViewDistance;
     // CraftBukkit end
     public PlayerNaturallySpawnCreaturesEvent playerNaturallySpawnedEvent; // Paper
+    private boolean tpsBar = false; // Rubia
 
     public boolean isRealPlayer; // Paper
     public double lastEntitySpawnRadiusSquared; // Paper - optimise isOutsideRange, this field is in blocks
@@ -486,6 +487,7 @@ public class ServerPlayer extends Player {
             }
         }
 
+         if (nbt.contains("Rubia.TPSBar")) this.tpsBar = nbt.getBoolean("Rubia.TPSBar"); // Rubia
     }
 
     @Override
@@ -546,6 +548,7 @@ public class ServerPlayer extends Player {
         }
         this.getBukkitEntity().setExtraData(nbt); // CraftBukkit
 
+        nbt.putBoolean("Rubia.TPSBar", this.tpsBar); // Rubia
     }
 
     // CraftBukkit start - World fallback code, either respawn location or global spawn
@@ -2487,4 +2490,14 @@ public class ServerPlayer extends Player {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+
+    // Rubia start - TPSBar methods.
+    public boolean getTPSBar() {
+        return this.tpsBar;
+    }
+
+    public void setTPSBar(boolean tpsBar) {
+        this.tpsBar = tpsBar;
+    }
+    // Rubia end
 }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index fc755298ebe76d71bd55d547fb82604df1da652a..720bc43e7e4f2d4cf97ce0651cc92b6bb8e55b21 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -503,6 +503,7 @@ public abstract class PlayerList {
             scoreboard.addPlayerToTeam(player.getScoreboardName(), collideRuleTeam);
         }
         // Paper end
+        moe.irochi.rubia.command.TPSBarCommand.TPSBarTask.addToAll(player); // Rubia
         // CraftBukkit - Moved from above, added world
         PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", player.getName().getString(), s1, player.getId(), worldserver1.serverLevelData.getLevelName(), player.getX(), player.getY(), player.getZ());
     }
@@ -613,6 +614,8 @@ public abstract class PlayerList {
     }
     public net.kyori.adventure.text.Component remove(ServerPlayer entityplayer, net.kyori.adventure.text.Component leaveMessage) {
         // Paper end
+        moe.irochi.rubia.command.TPSBarCommand.TPSBarTask.removeFromAll(entityplayer.getBukkitEntity()); // Rubia
+
         ServerLevel worldserver = entityplayer.getLevel();
 
         entityplayer.awardStat(Stats.LEAVE_GAME);
diff --git a/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java b/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
deleted file mode 100644
index da2eb57ea64403657744ea00eff40243ef51df58..0000000000000000000000000000000000000000
--- a/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package io.papermc.paper.permissions;
-
-import com.mojang.brigadier.tree.CommandNode;
-import com.mojang.brigadier.tree.RootCommandNode;
-import net.minecraft.commands.CommandBuildContext;
-import net.minecraft.commands.CommandSourceStack;
-import net.minecraft.commands.Commands;
-import net.minecraft.core.RegistryAccess;
-import net.minecraft.server.Bootstrap;
-import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
-import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
-import org.bukkit.permissions.Permission;
-import org.bukkit.support.AbstractTestingBase;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-import java.io.PrintStream;
-import java.util.HashSet;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.TreeSet;
-
-import static org.junit.Assert.assertTrue;
-
-public class MinecraftCommandPermissionsTest extends AbstractTestingBase {
-
-    private static PrintStream old;
-    @BeforeClass
-    public static void before() {
-        old = System.out;
-        System.setOut(Bootstrap.STDOUT);
-    }
-
-    @Test
-    public void test() {
-        CraftDefaultPermissions.registerCorePermissions();
-        Set<String> perms = collectMinecraftCommandPerms();
-
-        Commands commands = new Commands(Commands.CommandSelection.DEDICATED, new CommandBuildContext(RegistryAccess.BUILTIN.get()));
-        RootCommandNode<CommandSourceStack> root = commands.getDispatcher().getRoot();
-        Set<String> missing = new LinkedHashSet<>();
-        Set<String> foundPerms = new HashSet<>();
-        for (CommandNode<CommandSourceStack> child : root.getChildren()) {
-            final String vanillaPerm = VanillaCommandWrapper.getPermission(child);
-            if (!perms.contains(vanillaPerm)) {
-                missing.add("Missing permission for " + child.getName() + " (" + vanillaPerm + ") command");
-            } else {
-                foundPerms.add(vanillaPerm);
-            }
-        }
-        assertTrue("Commands missing permissions: \n" + String.join("\n", missing), missing.isEmpty());
-        perms.removeAll(foundPerms);
-        assertTrue("Extra permissions not associated with a command: \n" + String.join("\n", perms), perms.isEmpty());
-    }
-
-    private static final List<String> TO_SKIP = List.of(
-        "minecraft.command.selector"
-    );
-
-    private static Set<String> collectMinecraftCommandPerms() {
-        Set<String> perms = new TreeSet<>();
-        for (Permission perm : Bukkit.getPluginManager().getPermissions()) {
-            if (perm.getName().startsWith("minecraft.command.")) {
-                if (TO_SKIP.contains(perm.getName())) {
-                    continue;
-                }
-                if (perm.getName().endsWith(".xp")) {
-                    perms.add("minecraft.command.experience"); // for the "experience" command, craftbukkit perm is "minecraft.command.xp"
-                    continue;
-                }
-                perms.add(perm.getName());
-            }
-        }
-        return perms;
-    }
-
-    @AfterClass
-    public static void after() {
-        if (old != null) {
-            System.setOut(old);
-        }
-    }
-}
